Videos on Directives Deep Dive

Video 1 Module Introduction
We just go over the two different directive types: Attribute and Structural
Attribute directives look like a normal HTML attribute. They can change or alter an element based on whether a condition is true or false. Like if a condition is met, the paragraph element the directive is in will have a bold red font.
Structural directives look like an HTML attribute but with a *before it. Like *ngIF and *ngFor. These actually can change the DOM itself by adding or removing the repspective element based on a condtion met or not met. 

Video 2- ngFor and ngIf
I watched the video and coded along with *ngFor and *ngIf but i don't quite understand what is happening. It works but i don't know why. I am pausing 
here and calling it in the morning. 

So with the ngFor and ngIf video we use the click event listening in the button to toggle between onlyOdd=!onlyOdd

When only odd equals true on the toggle it will show the div labled with the *ngIf directive "onlyOdd which will then show 
the list items we have with oddNumbers and it shows it by creating a new list item uding *ngFor by creating a new list item with
each "odd" of oddNumbers and we input the values into the DOM , each value, with string Interpolation. 

<button
        class="btn btn-primary"
        (click)="onlyOdd=!onlyOdd">Only show {{onlyOdd}}</button>
      <br><br>
      <ul class="list-group">
        <div *ngIf="onlyOdd">
          <li
          class="list-group-item"
          [ngClass]="{odd: odd % 2 !==0}"
          [ngStyle]="{backgroundColor: odd % 2 !== 0  ? 'yellow' : 'transparent'}"
          *ngFor="let odd of oddNumbers">
          {{odd}}
        </li>
        </div>

        <div *ngIf="!onlyOdd">
          <li
          class="list-group-item"
          [ngClass]="{odd: even % 2 !==0}"
          [ngStyle]="{backgroundColor: even % 2 !== 0 ? 'yellow' : 'transparent'}"
          *ngFor="let even of evenNumbers">
          {{even}}
        </li>
---

Video 3- ngClass and ngStyle Recap


For the above code, we are using ngClass where we added a class .odd to the css file to be red. 

[ngClass]="{odd: odd % 2 !==0}"  //here this class "odd" which means red font, will apply if the odd value does not have a remainder of 0 which it will not. so the odd numbers will be red. 

[ngClass]="{odd: even % 2 !==0}"  ==here the red font will apply if even divided by two does not equal zero which it will so the odd class will not apply. font will stay black



 [ngStyle]="{backgroundColor: odd % 2 !== 0  ? 'yellow' : 'transparent'}"--//here it says if odd number divded by 2 does not eual 0, which is does not, then we will have a yellow background

 [ngStyle]="{backgroundColor: even % 2 !== 0 ? 'yellow' : 'transparent'}" --//if even divided by two does not equal zero yellow, if it does than transparent, so this will be transparent because even divided by two equals 0.



Video 4- Creating a Basic Attribute Directive

Below we created a new customer directive by adding a new folder to the app folder named "basic-highlight" where we 
created a new file "basic-highlight-directive.ts"
there we import a Directive, ElementRed, OnInit from Angular/Core
then use the @Directive decorator and within create a selector for our directive so we can use it elsewhere 
we name in [appBasicHighlight] in square brackets so that we can use it straight up. 

then we export class BasicHighlightDirective implements OnInit with a constructor that assigns elementRef to ElementRef((((
what is ElementRef?= descriptions i dont understand now))))


""import { Directive, ElementRef, OnInit } from "@angular/core";

@Directive ({
  selector: '[appBasicHighlight]'
})

export class BasicHighlightDirective implements OnInit {
constructor(private elementRef:ElementRef) {

}

ngOnInit() {
    this.elementRef.nativeElement.style.backgroundColor= 'green';
}

}""

THEN we apply this directive in the HTML by creating a new <p> and adding the directive like this--
<p appBasicHighlight> HELLO I WILL BE GREEN FROM THE CUSTOM DIRECTIVE</p>
using the selector we made. and ElementRef allows us access to this? 


Video 5 Using the Renderer to build a Better Attribute Directive


WE create a new directive NAMED better-highlight-directive automatically with the CLI like this:
ng g d better-highlight 

it automatically creates the file and imports and the selector etc. 
in the constructor we pass the private elRe: ElementRef, private renderer: Renderer2) which we also import both of these. the elementRef
gives us access to the dom element we place this on. 

then in ngOnInit ,,and im not sure why this is here but here i where we run the code we want to render==
 ngOnInit() {
    this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'blue', );
  }
}


we then add the new selctor appBetterHighlight to a new p in the html. 


















