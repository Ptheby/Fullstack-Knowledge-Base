Video 1- Intro
Video 2- Reactive Setup
In this video we start in the TS file because Reactuve Forms apporach is creating the form programmatically. We start by creating a variable to hold our form and in this case we name it
signupForm= FormGroup   where FormGroup is an angular object thaat represents a group of related form controls. and we must IMPORT the FormGroup at the TS file at @angular/forms
and also at the app.module. ReactiveFormsModule in @NgMOdel


Video 3 Creating a form in Code

First we create a variable in the TS file named signupForm that will be assigned a value of = FormGroup which is an Angular object for forms, that we must import.
then we implement onInit, and in the ngOnInit we create a new instance of this formgroup to start are form and do that below. and create our first form controls with username,email, gender
by using the new FormControl keyword which must also be imported and we then set their initial values in paranthesis:


export class AppComponent implements OnInit {
  genders = ["male", "female"];
  signupForm: FormGroup;

  ngOnInit(): void {
    this.signupForm = new FormGroup({
      'username': new FormControl("Default Username"), // this is creating controls and their default values which can also be null in my new formgroup
      'email': new FormControl(null),
      'gender': new FormControl('male')
    }); // this is our first basic form created programmatically.!

Video 4- Syncing HTML and FORM
When we have the element <form> in html with the FORMSMODULE imported into our project in the ts ann app module, Angular is creating a form for us but we dont want it to do that since we have created our own dynamically in the TS with Form Group. so we must tell it that at the form element in HTML. we do that with 
[formGroup]="signupForm.
This syncs the form up with the instance of FOrmGroup we created in our ts with the name signupForm.  Now it knows this is the form we are referencing and using but we also need to register the controls in the ts with the inputs in the HTMK and we do that by adding formControlName="username" in each input with the name we created in ts in quotations. 

HTML  

<form [formGroup]="signupForm" (ngSubmit)="onSubmit()">
        <div class="form-group">
          <label for="username">Username</label>
          <input
            type="text"
            formControlName="username"
            id="username"
            class="form-control">

TS
 ngOnInit(): void {
    this.signupForm = new FormGroup({
      'username': new FormControl(null, Validators.required), // this is creating controls and their default values which can also be null in my new formgroup
      'email': new FormControl(null,[Validators.required,Validators.email]),
      'gender': new FormControl('male')
    }); // this is our fi

Video 5- Submitting the Form

In the template-driven approach had to add the (ngSubmit)="onSubmit()" on the form element and in the reactive approach we actually do the same but we don't have to use a local reference to 
gain access because we already have access because we created the form in the ts. so we must simply add a console.log to the onSubmit method in the ts like this
and then when we submit now we can see the object form in the console: 
HTML
<form [formGroup]="signupForm" (ngSubmit)="onSubmit()">

TS
onSubmit() {
    console.log(this.signupForm)
  }

Video 6- Adding Validation

to add validation to the template driven approach we just had to add the required keyword to the input element in html. We do not do that in the reactive approach, we actualy add it to eh 
ts file because that is where we are configuring out form. We can add one or more validators at the second location within the parantheses of the new form controls in our new form.
We do that with the Validator object with a period and then either required or another built in method. And we can add more than one validator like in the emaiol below by using an arrayof validators

:ngOnInit(): void {
    this.signupForm = new FormGroup({
      'username': new FormControl(null, Validators.required), // this is creating controls and their default values which can also be null in my new formgroup
      'email': new FormControl(null,[Validators.required,Validators.email]),
      'gender': new FormControl('male')
    }); // this is our first basic form created programmatically.!
  }

Now when we submit it will show valid true or false depending on if its filled out or filled out correctly. 



Video 7- Getting Access to Controls

==in this lecture we want to display a message below two inputs and then at the form level as well. 

we add a span element right after the input closing bracket and in that we use *ngIf. Where we also use the get method on the form to access the username and check if its valid or actually NOT 
valid and then also if its been touched. My message will display if its invalid and has also been touched. And then at the form level we remove the get() because we only want to check if the whole form is valid not each individual input control. 

====for the EMAIL 
<input
            type="text"
            id="email"
            formControlName="email"
            class="form-control">
            <span
            *ngIf="!signupForm.get('email').valid && signupForm.get('email').touched">
Please Enter a Valid Email
            </span>
====For the FORM
</div>
        <span
        *ngIf="!signupForm.valid && signupForm.touched">
Please Complete Form!
        </span>

Video 8- Grouping Controls

---now we mentioned that the get() can also take not just a name of a contriol but a path in case our controls are nested like in a Form Group. So we will lump our username and email into a new FormGroup within the signupForm group in order to show this. We start by in our TS file by creating a new control on the signupForm
called userdata and then cutting and pasting the username and email controls into that like this:

ngOnInit(): void {
    this.signupForm = new FormGroup({
      'userData': new FormGroup({
        'username': new FormControl(null, Validators.required),
        'email': new FormControl(null,[Validators.required,Validators.email])
      })
     ,
      'gender': new FormControl('male')
    }); 

====then we wrap a new div around the two inputs in our template and on that div we add a formGroupName="userData" to sync that and then in our two *ngIfs we must add userData with a period before the input names like below. Now it will work again!

<div formGroupName="userData">
          <div class="form-group">
            <label for="username">Username</label>
            <input
              type="text"
              formControlName="username"
              id="username"
              class="form-control"
            />
            <span
              *ngIf="
                !signupForm.get('userData.username').valid &&
                signupForm.get('userData.username').touched
              "
            >
              Please Enter a Valid Username!
            </span>


Video 9- Arrays of Form Controls 

WE start this out in the template by creating a new div with an h4 for Your Hobbies. then a button with a click event listener that runs the method onAddHobby. 
What we are doing is creating a new hobbies control array in the TS file and we do that with  'hobbies'= new FormArray([]) and initialize it with the empty brackets. Then we actually create the new form control object in the onAddHobby method with    const control= new FormControl passing null as the default value, and Validators.required as the validator. we then use it in the method to push whatever is entered onto the new hobbies array. There is more to this that i dont understand and cant spend the time on it now. 

====HTML====
 <div formArrayName="hobbies">
          <h4>Your Hobbies</h4>
          <button class="btn btn-default" type="button" (click)="onAddHobby()">
            Add Hobby
          </button>
          <div class="form-group"
          *ngFor="let hobbyControl of getControls(); let i = index">
            <input type="text" class="form-control" [formControlName]="i">
          </div>

====TS====
'hobbies': new FormArray([])

getControls() {
    return (<FormArray>this.signupForm.get('hobbies')).controls;
  }

 onAddHobby () {
    const control = new FormControl(null, Validators.required);
    (<FormArray>this.signupForm.get('hobbies')).push(control);
  }


Video 10- Creating Custom Validators
 I was quoite lost on this one.
First we create a new variable under export in TS   forbiddenUsernames: ['Chris','Anna']

then below we created this function to  run through the index of Forbidden user names again 

I may call on this one later: We add our new validaotr below to the username validators. ====='username': new FormControl(null, [Validators.required, this.forbiddenNames.bind(this)]),



forbiddenNames(control:FormControl): {[s:string]:boolean} {
     if (this.forbiddenUsernames.indexOf(control.value) !== -1) {
      return {'nameIsForbidden':true};
     }
     return null;
  }



Video 11- Using Error Codes


 <input
              type="text"
              formControlName="username"
              id="username"
              class="form-control"
            />
            <span
              *ngIf="
                !signupForm.get('userData.username').valid &&
                signupForm.get('userData.username').touched
              "
              class="help-block">
              <span *ngIf="signupForm.get('userData.username').errors['nameIsForbidden']">This Name is Invalid</span>
              <span *ngIf="signupForm.get('userData.username').errors['required']">This Name is Required</span>
          
            </span>


Video 12- Creating a Custom Async Validator---no idea hes doing way too much here.

 forbiddenEmails(control: FormControl): Promise<any> | Observable<any> {
    const promise = new Promise<any>((resolve, reject) => {
      setTimeout(() => {
        if (control.value === "test@test.com") {
          resolve({ emailIsForbidden: true });
        } else {
          resolve(null);
        }
      }, 1500);
    });
    return promise;
  }

Video 13- Reacting to to status or value changes

--there is a form state we can track in general and we can do that in our example by going into OnInit in the TS
and we caccess our form with this.signupForm.statusChange  OR .valueChange.subscribe(
                                                               (value)=>console.log(value)

//      this.signupForm.valueChanges.subscribe(
// (value)=> console.log(value)
// );
     this.signupForm.statusChanges.subscribe(
(status)=> console.log(status)
);


Video 14-  Setting and Patching Values

We can use setValue to set all values to defaults or patchValue to set only certain values to defaults. Then we can use .reset to reset for onSubmit() like below. 
// this.signupForm.setValue({
//   'userData': {
//     'username': 'Paul',
//     'email': "Paul@test.com"
//   },
//   'gender': 'male',
//   'hobbies': []
// })
this.signupForm.patchValue({
  'userData': {
    'username': 'Paul',
   }})


  }
  onSubmit() {
    console.log(this.signupForm);
    this.signupForm.reset();


Video 15- Assignment- Reactive Forms

























