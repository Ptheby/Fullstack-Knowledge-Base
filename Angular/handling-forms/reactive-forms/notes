Video 1- Intro
Video 2- Reactive Setup
In this video we start in the TS file because Reactuve Forms apporach is creating the form programmatically. We start by creating a variable to hold our form and in this case we name it
signupForm= FormGroup   where FormGroup is an angular object thaat represents a group of related form controls. and we must IMPORT the FormGroup at the TS file at @angular/forms
and also at the app.module. ReactiveFormsModule in @NgMOdel


Video 3 Creating a form in Code

First we create a variable in the TS file named signupForm that will be assigned a value of = FormGroup which is an Angular object for forms, that we must import.
then we implement onInit, and in the ngOnInit we create a new instance of this formgroup to start are form and do that below. and create our first form controls with username,email, gender
by using the new FormControl keyword which must also be imported and we then set their initial values in paranthesis:


export class AppComponent implements OnInit {
  genders = ["male", "female"];
  signupForm: FormGroup;

  ngOnInit(): void {
    this.signupForm = new FormGroup({
      'username': new FormControl("Default Username"), // this is creating controls and their default values which can also be null in my new formgroup
      'email': new FormControl(null),
      'gender': new FormControl('male')
    }); // this is our first basic form created programmatically.!

Video 4- Syncing HTML and FORM
When we have the element <form> in html with the FORMSMODULE imported into our project in the ts ann app module, Angular is creating a form for us but we dont want it to do that since we have created our own dynamically in the TS with Form Group. so we must tell it that at the form element in HTML. we do that with 
[formGroup]="signupForm.
This syncs the form up with the instance of FOrmGroup we created in our ts with the name signupForm.  Now it knows this is the form we are referencing and using but we also need to register the controls in the ts with the inputs in the HTMK and we do that by adding formControlName="username" in each input with the name we created in ts in quotations. 

HTML  

<form [formGroup]="signupForm" (ngSubmit)="onSubmit()">
        <div class="form-group">
          <label for="username">Username</label>
          <input
            type="text"
            formControlName="username"
            id="username"
            class="form-control">

TS
 ngOnInit(): void {
    this.signupForm = new FormGroup({
      'username': new FormControl(null, Validators.required), // this is creating controls and their default values which can also be null in my new formgroup
      'email': new FormControl(null,[Validators.required,Validators.email]),
      'gender': new FormControl('male')
    }); // this is our fi

Video 5- Submitting the Form

In the template-driven approach had to add the (ngSubmit)="onSubmit()" on the form element and in the reactive approach we actually do the same but we don't have to use a local reference to 
gain access because we already have access because we created the form in the ts. so we must simply add a console.log to the onSubmit method in the ts like this
and then when we submit now we can see the object form in the console: 
HTML
<form [formGroup]="signupForm" (ngSubmit)="onSubmit()">

TS
onSubmit() {
    console.log(this.signupForm)
  }

Video 6- Adding Validation

to add validation to the template driven approach we just had to add the required keyword to the input element in html. We do not do that in the reactive approach, we actualy add it to eh 
ts file because that is where we are configuring out form. We can add one or more validators at the second location within the parantheses of the new form controls in our new form.
We do that with the Validator object with a period and then either required or another built in method. And we can add more than one validator like in the emaiol below by using an arrayof validators

:ngOnInit(): void {
    this.signupForm = new FormGroup({
      'username': new FormControl(null, Validators.required), // this is creating controls and their default values which can also be null in my new formgroup
      'email': new FormControl(null,[Validators.required,Validators.email]),
      'gender': new FormControl('male')
    }); // this is our first basic form created programmatically.!
  }

Now when we submit it will show valid true or false depending on if its filled out or filled out correctly. 



Video 7-

































